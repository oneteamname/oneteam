<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin.movie.mybatis.Account">
	<select id="listMovie" parameterType="Map" resultType="Movie_infoDTO">
      select * from (select rownum as rn,movie.* from (select * from Movies_info order by num desc)movie) where rn between #{start} and #{end} 
   </select>
	
	<select id="getCount" resultType="int">
		select count(*) from movies_info
	</select>
	
	<select id="DayToList" parameterType="String" resultType="Movie_infoDTO">
		select * from MOVIES_INFO where #{date} between opendate  and closedate
	</select>
	
	<select id="all" resultType="Movie_infoDTO">
		select * from movies_info 
	</select>
	
	<select id="now" resultType="Movie_infoDTO">
		select * from MOVIES_INFO where to_date(sysdate,'yy/MM/dd')  between to_date(OPENDATE,'yy/MM/dd') and to_date(CLOSEDATE,'yy/MM/dd')
	</select>
	
	<select id="nowSchedule" parameterType="String" resultType="Movie_infoDTO">
		select * from MOVIES_INFO where to_date(#{day},'yy/MM/dd')
		between to_date(OPENDATE,'yy/MM/dd') and to_date(CLOSEDATE,'yy/MM/dd')
	</select>
	
	<select id="due" resultType="Movie_infoDTO">
		select * from movies_info where OPENDATE>sysdate
	</select>
	
<select id="box" resultType="Movie_infoDTO">
		select  a.* from (select movies_info.* from movies_info where to_date(sysdate,'yy/MM/dd') between to_date(opendate,'yy/MM/dd')
       and to_date(closedate,'yy/MM/dd') order by watchcount desc) a where 3>=rownum   
	</select>
	
	<select id="getMovie" parameterType="int" resultType="Movie_infoDTO">
		select * from movies_info where num=#{num}
	</select>
	<select id="nowMonthMovie" resultType="String">
		select title from MOVIES_INFO where opendate like #{date}||'%' or CLOSEDATE like #{date}||'%' or to_date(#{date}||'/01','yy/MM/dd') BETWEEN to_date(opendate,'yy/MM/dd') and to_date(closedate,'yy/MM/dd')
	</select>
	<insert id="insertMovie" parameterType="Movie_infoDTO">
		insert into movies_info values(movies_seq.nextval,#{title},#{genre},#{grade},
		#{country},to_date(#{opendate},'yy/MM/dd'),#{runtime},#{movie_info},#{poster},
		0,'99/12/31',#{director}, #{actor}) 
	</insert>

	<update id="updateMovie" parameterType="Movie_infoDTO">
		update movies_info set title=#{title},genre=#{genre},grade=#{grade},country=#{country},
		opendate=to_date(#{opendate},'yy/MM/dd'),runtime=#{runtime},director=#{director},actor=#{actor},movie_info=#{movie_info},
		poster=#{poster} where num =#{num}
	</update>
	
	<update id="updateLike_num" parameterType="int">
		update movies_info set like_num = like_num+1 where num = #{num}
	</update>
	
	<delete id="deleteMovie" parameterType="int">
		delete from Movies_info where num = #{num}
	</delete>
	
	<select id="searchMovie" parameterType="HashMap" resultType="Movie_infoDTO">
		select * from MOVIES_INFO where #{search} = #{searchStr}
	</select>
	
	<insert id="insertStillcut" parameterType="Movie_urlDTO">
		insert into movies_info_url values(#{num} , #{stillcut} )
	</insert>
	
	<select id="getStillcut" parameterType="int" resultType="Movie_urlDTO">
		select * from movies_info_url where num = #{num}
	</select>

	<update id ="upCount" parameterType="int" >
		update movies_info set watchcount = watchcount + 1 where num = #{num}
	</update>

	<update id ="downCount" parameterType="int" >
		update movies_info set watchcount = watchcount - 1 where num = #{num}
	</update>
	
	<update id ="updateClose" parameterType="int" >
		update movies_info set closedate = to_date(sysdate,'yy/MM/dd') where num = #{num}
	</update>
	
	<!-- 영화한줄평 -->
	<select id="listReply" parameterType="map" resultType="Movie_info_replyDTO">
		select * from (select rownum rn, reply.* from (select * from MOVIE_INFO_REPLY where movieNum = #{movieNum} order by num)reply) 
		where rn between #{startRow} and #{endRow}
	</select>
	<!-- @@@@@@@@@@@@ -->
	<select id="listReply2" parameterType="int" resultType="Movie_info_replyDTO">
      select * from MOVIE_INFO_REPLY where movienum= #{num} order by num desc
   </select>
	<select id="replyGetCount" resultType="int">
		select count(*) from movie_info_reply
	</select>
	<select id="replyGetCountByMovieNum" parameterType="int" resultType="int">
		select count(*) from movie_info_reply where movienum = #{movieNum}
	</select>
	<select id="allReply" resultType="Movie_info_replyDTO">
      select * from MOVIE_INFO_REPLY order by num desc
    </select>
	<delete id="deleteReply" parameterType="int">
		delete from MOVIE_INFO_REPLY where num = #{num}
	</delete>
	<insert id="insertReply" parameterType="Movie_info_replyDTO">
      insert into MOVIE_INFO_REPLY values(reply_seq.nextval,#{id},#{reply},sysdate,#{movieNum})
    </insert> 
</mapper>



<!-- 아이바티스 -->
<!-- <!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap>

  Use type aliases to avoid typing the full classname every time.
  <typeAlias alias="BoardDTO" type="board.dto.BoardDBBean"/>

  Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties 
       exactly.
  <resultMap id="BoardResult" class="BoardDTO">
    <result property="num" column="num"/>
    <result property="writer" column="writer"/>
    <result property="email" column="email"/>
    <result property="subject" column="subject"/>
    <result property="passwd" column="passwd"/>
    <result property="reg_date" column="reg_date"/>
    <result property="readcount" column="readcount"/>
    <result property="content" column="content"/>
    <result property="ip" column="ip"/>
  </resultMap>

  Select with no parameters using the result map for Account class.
  <select id="listBoard" resultMap="BoardResult">
    select * from board order by num desc
  </select>

  A simpler select example without the result map.  Note the 
       aliases to match the properties of the target result class.
  <select id="getBoard" parameterClass="int" resultClass="BoardDTO">
    select * from board where num = #num#
  </select>
   
  <insert id="insertBoard" parameterClass="BoardDTO">
    insert into board values(board_seq.nextval, #writer#,#email#,#subject#,#passwd#,sysdate,0,#content#,#ip#,#re_step#,#re_level#,#filename#,#filesize#)
  </insert>

  Update example, using the Account parameter class
  <update id="updateAccount" parameterClass="Account">
    update ACCOUNT set
      ACC_FIRST_NAME = #firstName#,
      ACC_LAST_NAME = #lastName#,
      ACC_EMAIL = #emailAddress#
    where
      ACC_ID = #id#
  </update>

  Delete example, using an integer as the parameter class
  <delete id="deleteAccountById" parameterClass="int">
    delete from ACCOUNT where ACC_ID = #id#
  </delete>

</sqlMap> -->